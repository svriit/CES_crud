name: Deploy Student CRUD App

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      - name: Install AWS CLI and Dependencies
        run: |
          pip install awscli
          pip install -r backend/lambda_functions/requirements.txt

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy Lambda Functions
        env:
          LAMBDA_FUNCTION_ADD: ${{ secrets.LAMBDA_FUNCTION_ADD }}
          LAMBDA_FUNCTION_GET: ${{ secrets.LAMBDA_FUNCTION_GET }}
          LAMBDA_EXECUTION_ROLE: arn:aws:iam::135808949659:role/LambdaExecutionRole
        run: |
          cd backend/lambda_functions
          zip -r ../../lambda.zip .
          cd ../../

          for function in $LAMBDA_FUNCTION_ADD $LAMBDA_FUNCTION_GET; do
            if aws lambda get-function --function-name $function; then
              aws lambda update-function-code --function-name $function --zip-file fileb://lambda.zip
            else
              aws lambda create-function \
                --function-name $function \
                --runtime python3.9 \
                --role $LAMBDA_EXECUTION_ROLE \
                --handler lambda_function.lambda_handler \
                --zip-file fileb://lambda.zip
            fi
          done

      - name: Deploy Frontend to S3
        env:
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
        run: |
          aws s3 sync frontend/ s3://$S3_BUCKET_NAME --delete
          
          # Set bucket for static website hosting
          aws s3 website s3://$S3_BUCKET_NAME --index-document index.html

          # Make bucket public
          aws s3api put-bucket-policy --bucket $S3_BUCKET_NAME --policy '{
            "Version": "2012-10-17",
            "Statement": [
              {
                "Sid": "PublicReadGetObject",
                "Effect": "Allow",
                "Principal": "*",
                "Action": "s3:GetObject",
                "Resource": "arn:aws:s3:::'$S3_BUCKET_NAME'/*"
              }
            ]
          }'

      - name: Get Deployment URLs
        id: get_urls
        run: |
          echo "Frontend URL: http://${{ secrets.S3_BUCKET_NAME }}.s3-website-${{ secrets.AWS_REGION }}.amazonaws.com"
          echo "Add Student API: https://b31i1zxvcd.execute-api.ap-south-1.amazonaws.com/prod/students"
          echo "Get Students API: https://fabj02e95h.execute-api.ap-south-1.amazonaws.com/prod/students"

      - name: Create Status File
        run: |
          echo "# Deployment Status" > deployment_status.md
          echo "Frontend URL: http://${{ secrets.S3_BUCKET_NAME }}.s3-website-${{ secrets.AWS_REGION }}.amazonaws.com" >> deployment_status.md
          echo "Add Student API: https://b31i1zxvcd.execute-api.ap-south-1.amazonaws.com/prod/students" >> deployment_status.md
          echo "Get Students API: https://fabj02e95h.execute-api.ap-south-1.amazonaws.com/prod/students" >> deployment_status.md

      - name: Upload Status as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-status
          path: deployment_status.md
          retention-days: 5

      - name: Invalidate CloudFront Cache (Optional)
        if: env.CLOUDFRONT_DISTRIBUTION_ID != ''
        env:
          CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
        run: |
          aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --paths "/*" || echo "Skipping CloudFront invalidation"
