name: Deploy Student CRUD App

on:
  push:
    branches:
      - main  # Runs on every push to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.8'

      - name: Install Dependencies
        run: pip install -r backend/lambda_functions/requirements.txt

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Zip Lambda Functions
        run: |
          cd backend/lambda_functions
          zip -r ../../lambda.zip .
          cd ../../
          ls -lh  # List files to verify zip

      - name: Deploy Lambda Functions
        env:
          LAMBDA_FUNCTION_ADD: ${{ secrets.LAMBDA_FUNCTION_ADD }}
          LAMBDA_FUNCTION_GET: ${{ secrets.LAMBDA_FUNCTION_GET }}
          LAMBDA_EXECUTION_ROLE: arn:aws:iam::135808949659:role/LambdaExecutionRole
        run: |
          for function in $LAMBDA_FUNCTION_ADD $LAMBDA_FUNCTION_GET; do
            if aws lambda get-function --function-name $function; then
              echo "Updating existing function $function"
              aws lambda update-function-code --function-name $function --zip-file fileb://lambda.zip
            else
              echo "Creating new function $function"
              aws lambda create-function \
                --function-name $function \
                --runtime python3.8 \
                --role $LAMBDA_EXECUTION_ROLE \
                --handler lambda_function.lambda_handler \
                --zip-file fileb://lambda.zip
            fi
          done

      - name: Deploy Flask Frontend to S3
        env:
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
        run: aws s3 sync frontend/ s3://$S3_BUCKET_NAME --delete

      - name: Invalidate CloudFront Cache (Optional)
        if: env.CLOUDFRONT_DISTRIBUTION_ID != ''
        env:
          CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
        run: |
          aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --paths "/*" || echo "Skipping CloudFront invalidation"
